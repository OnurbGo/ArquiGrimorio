"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Portal = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = require("react");
var _reactDom = _interopRequireDefault(require("react-dom"));
var _passthroughProps = require("@instructure/ui-react-utils/lib/passthroughProps.js");
var _textDirectionContextConsumer = require("@instructure/ui-i18n/lib/textDirectionContextConsumer.js");
var _canUseDOM = require("@instructure/ui-dom-utils/lib/canUseDOM.js");
var _props = require("./props");
const _excluded = ["open", "insertAt", "onOpen", "onClose", "mountNode", "children", "elementRef", "dir"];
var _dec, _class, _Portal;
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/**
---
category: components/utilities
---
@module Portal
**/
let Portal = exports.Portal = (_dec = (0, _textDirectionContextConsumer.textDirectionContextConsumer)(), _dec(_class = (_Portal = class Portal extends _react.Component {
  constructor(props) {
    super(props);
    this.DOMNode = null;
    this.ref = null;
    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;
      this.DOMNode = el;
      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
    if (!_canUseDOM.canUseDOM) {
      return;
    }
    this.state = {
      mountNode: this.findMountNode(props)
    };
  }
  componentDidMount() {
    if (!_canUseDOM.canUseDOM) {
      return;
    }

    // If Portal is mounting in an open condition fire onOpen handler
    if (this.props.open && _react.Children.count(this.props.children) > 0) {
      this.forceUpdate(() => {
        if (this.props.open && typeof this.props.onOpen === 'function') {
          this.props.onOpen(this.DOMNode);
        }
      });
    }
  }
  componentDidUpdate(prevProps) {
    if (!_canUseDOM.canUseDOM) {
      return;
    }
    const mountNode = this.findMountNode(this.props);
    if (mountNode !== this.state.mountNode) {
      // set state here to make the component re-render
      this.setState({
        mountNode
      });
    }

    // If Portal was closed but is now open fire onOpen handler
    if (this.props.open && !prevProps.open && typeof this.props.onOpen === 'function') {
      this.props.onOpen(this.DOMNode);
    }

    // If Portal was open but is now closed fire onClose handler
    if (!this.props.open && prevProps.open && typeof this.props.onClose === 'function') {
      this.props.onClose();
    }
  }
  componentWillUnmount() {
    if (!_canUseDOM.canUseDOM) {
      return;
    }
    this.removeNode();

    // If Portal was open fire onClose handler
    if (this.props.open && typeof this.props.onClose === 'function') {
      this.props.onClose();
    }
  }
  removeNode() {
    if (this.DOMNode && this.DOMNode.parentNode && typeof this.DOMNode.parentNode.removeChild === 'function') {
      this.DOMNode.parentNode.removeChild(this.DOMNode);
      this.handleRef(null);
    }
  }
  insertNode() {
    const _this$props = this.props,
      open = _this$props.open,
      insertAt = _this$props.insertAt,
      onOpen = _this$props.onOpen,
      onClose = _this$props.onClose,
      mountNode = _this$props.mountNode,
      children = _this$props.children,
      elementRef = _this$props.elementRef,
      dir = _this$props.dir,
      props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);

    // Create node if it doesn't already exist
    if (!this.DOMNode) {
      const node = document.createElement('span');
      const attributes = {
        ...(0, _passthroughProps.passthroughProps)(props),
        dir
      };
      Object.keys(attributes).forEach(name => {
        node.setAttribute(name, attributes[name]);
      });
      this.handleRef(node);
    }

    // Append node to container if it isn't already
    if (this.DOMNode && this.DOMNode.parentNode !== this.state.mountNode) {
      if (insertAt === 'bottom') {
        this.state.mountNode.appendChild(this.DOMNode);
      } else {
        this.state.mountNode.insertBefore(this.DOMNode, this.state.mountNode.firstChild);
      }
    }
    return this.DOMNode;
  }
  findMountNode(props) {
    let mountNode;
    if (typeof props.mountNode === 'function') {
      mountNode = props.mountNode();
    } else if (props.mountNode) {
      mountNode = props.mountNode;
    }
    if (!mountNode || !mountNode.nodeName) {
      mountNode = document.body;
    }
    return mountNode;
  }
  get node() {
    return this.DOMNode;
  }
  render() {
    const _this$props2 = this.props,
      children = _this$props2.children,
      open = _this$props2.open;
    if (!_canUseDOM.canUseDOM && open) {
      return children;
    }
    return open && _react.Children.count(children) > 0 ? /*#__PURE__*/_reactDom.default.createPortal(children, this.insertNode()) : null;
  }
}, _Portal.displayName = "Portal", _Portal.propTypes = _props.propTypes, _Portal.allowedProps = _props.allowedProps, _Portal.defaultProps = {
  open: false,
  insertAt: 'bottom',
  onOpen: () => {},
  onClose: () => {},
  mountNode: null,
  children: null,
  elementRef: () => {}
}, _Portal)) || _class);
var _default = exports.default = Portal;