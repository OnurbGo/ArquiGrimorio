import { Component } from 'react';
import type { ContextViewProps } from './props';
/**
---
category: components
---
**/
declare class ContextView extends Component<ContextViewProps> {
    static readonly componentId = "ContextView";
    static allowedProps: readonly (keyof {
        as?: import("@instructure/shared-types").AsElementType;
        elementRef?: (element: Element | null) => void;
        height?: string | number;
        width?: string | number;
        maxHeight?: string | number;
        maxWidth?: string | number;
        minHeight?: string | number;
        minWidth?: string | number;
        children?: React.ReactNode;
        textAlign?: "start" | "center" | "end";
        background?: "default" | "inverse";
        debug?: boolean;
        margin?: import("@instructure/emotion").Spacing;
        padding?: import("@instructure/emotion").Spacing;
        shadow?: import("@instructure/emotion").Shadow;
        stacking?: import("@instructure/emotion").Stacking;
        placement?: import("@instructure/ui-position").PlacementPropValues;
        borderColor?: string;
    })[];
    static propTypes: import("@instructure/shared-types").PropValidators<keyof {
        as?: import("@instructure/shared-types").AsElementType;
        elementRef?: (element: Element | null) => void;
        height?: string | number;
        width?: string | number;
        maxHeight?: string | number;
        maxWidth?: string | number;
        minHeight?: string | number;
        minWidth?: string | number;
        children?: React.ReactNode;
        textAlign?: "start" | "center" | "end";
        background?: "default" | "inverse";
        debug?: boolean;
        margin?: import("@instructure/emotion").Spacing;
        padding?: import("@instructure/emotion").Spacing;
        shadow?: import("@instructure/emotion").Shadow;
        stacking?: import("@instructure/emotion").Stacking;
        placement?: import("@instructure/ui-position").PlacementPropValues;
        borderColor?: string;
    }>;
    static defaultProps: {
        as: string;
        elementRef: () => void;
        debug: boolean;
        width: string;
        height: string;
        children: null;
        textAlign: string;
        background: string;
        shadow: string;
        placement: string;
    };
    componentDidMount(): void;
    componentDidUpdate(): void;
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    render(): import("@emotion/react/jsx-runtime").JSX.Element;
}
export default ContextView;
export { ContextView };
//# sourceMappingURL=index.d.ts.map