"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ContextView = void 0;
var _react = require("react");
var _emotion = require("@instructure/emotion");
var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");
var _View = require("../View");
var _styles = _interopRequireDefault(require("./styles"));
var _theme = _interopRequireDefault(require("./theme"));
var _props = require("./props");
var _jsxRuntime = require("@emotion/react/jsx-runtime");
var _dec, _class, _ContextView;
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/**
---
category: components
---
**/
let ContextView = exports.ContextView = (_dec = (0, _emotion.withStyle)(_styles.default, _theme.default), _dec(_class = (_ContextView = class ContextView extends _react.Component {
  constructor(...args) {
    super(...args);
    this.ref = null;
    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;
      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }
  componentDidMount() {
    var _this$props$makeStyle, _this$props;
    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }
  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;
    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }
  render() {
    const _this$props3 = this.props,
      as = _this$props3.as,
      background = _this$props3.background,
      children = _this$props3.children,
      debug = _this$props3.debug,
      height = _this$props3.height,
      width = _this$props3.width,
      maxHeight = _this$props3.maxHeight,
      maxWidth = _this$props3.maxWidth,
      minHeight = _this$props3.minHeight,
      minWidth = _this$props3.minWidth,
      margin = _this$props3.margin,
      padding = _this$props3.padding,
      shadow = _this$props3.shadow,
      stacking = _this$props3.stacking,
      style = _this$props3.style,
      textAlign = _this$props3.textAlign,
      styles = _this$props3.styles,
      borderColor = _this$props3.borderColor;
    return (0, _jsxRuntime.jsx)(_View.View, {
      ...(0, _omitProps.omitProps)(this.props, ContextView.allowedProps),
      css: styles === null || styles === void 0 ? void 0 : styles.contextView,
      style: style,
      borderWidth: "none",
      display: "inline-block",
      as: as,
      withVisualDebug: debug,
      elementRef: this.handleRef,
      margin: margin,
      stacking: stacking,
      children: (0, _jsxRuntime.jsxs)(_View.View, {
        css: styles === null || styles === void 0 ? void 0 : styles.contextView__content,
        display: "block",
        borderRadius: "medium",
        borderWidth: "small",
        borderColor: borderColor || (background === 'default' ? 'primary' : 'transparent'),
        background: background === 'default' ? 'primary' : 'primary-inverse',
        withVisualDebug: debug,
        height: height,
        width: width,
        maxHeight: maxHeight,
        maxWidth: maxWidth,
        minHeight: minHeight,
        minWidth: minWidth,
        padding: padding,
        shadow: shadow,
        textAlign: textAlign,
        children: [(0, _jsxRuntime.jsx)("span", {
          css: styles === null || styles === void 0 ? void 0 : styles.contextView__arrow
        }), children]
      })
    });
  }
}, _ContextView.displayName = "ContextView", _ContextView.componentId = 'ContextView', _ContextView.allowedProps = _props.allowedProps, _ContextView.propTypes = _props.propTypes, _ContextView.defaultProps = {
  as: 'span',
  elementRef: () => {},
  debug: false,
  width: 'auto',
  height: 'auto',
  children: null,
  textAlign: 'start',
  background: 'default',
  shadow: 'resting',
  placement: 'center end'
}, _ContextView)) || _class);
var _default = exports.default = ContextView;