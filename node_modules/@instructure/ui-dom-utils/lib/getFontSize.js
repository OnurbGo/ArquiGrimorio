"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getFontSize = getFontSize;
var _canUseDOM = require("./canUseDOM");
var _ownerDocument2 = require("./ownerDocument");
var _getComputedStyle = require("./getComputedStyle");
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

const COMPUTED_CACHE = new WeakMap();

/**
 * ---
 * category: utilities/DOM
 * ---
 *
 * Gets font size in px
 *
 * @module getFontSize
 * @param { Node | Window | React.ReactElement | React.Component | function | undefined | null } el - component or DOM node
 * @param { boolean } ignoreCache
 * @returns { number } font size in px
 */
function getFontSize(el, ignoreCache = false) {
  var _ownerDocument;
  if (!_canUseDOM.canUseDOM) {
    return 16;
  }
  const container = el || ((_ownerDocument = (0, _ownerDocument2.ownerDocument)(el)) === null || _ownerDocument === void 0 ? void 0 : _ownerDocument.documentElement);

  // return the cached font size if it's there
  const cachedValue = COMPUTED_CACHE.get(container);
  if (!ignoreCache && cachedValue) {
    return cachedValue;
  }
  const fontSize = parseInt((0, _getComputedStyle.getComputedStyle)(container).getPropertyValue('font-size'));

  // cache the computed font size so that we don't have to compute it again
  COMPUTED_CACHE.set(container, fontSize);
  return fontSize;
}
var _default = exports.default = getFontSize;