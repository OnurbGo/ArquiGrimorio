"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.findFocusable = findFocusable;
var _ = require("./");
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Adapted from jQuery UI core
 *
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 **/
// TODO replace this with https://github.com/focus-trap/tabbable
// or even better use the native <dialog> component.
// tabbable has issues with scrollable containers, e.g.
// https://github.com/focus-trap/tabbable/issues/167

const focusableSelector = ['a[href]', 'frame', 'iframe', 'object', 'input:not([type=hidden])', 'select', 'textarea', 'button', '*[tabindex]', '[contenteditable="true"]'].join(',');
function hasQuerySelectorAll(el) {
  if (!el || typeof el.querySelectorAll !== 'function') {
    return false;
  }
  return true;
}

/**
 * ---
 * category: utilities/a11y
 * ---
 *
 * Given an element, finds and returns all visible, focusable children.
 * Focusable elements include input, select, textarea, button, and object.
 * Anchor tags are also focusable if they include an href or
 * tabindex attribute (including tabindices less than zero).
 * @module findFocusable
 * @param { Node | Window | React.ReactElement | React.Component | function | null } el component or DOM node
 * @param { function } filter a function to filter the matching nodes
 * @param { boolean } shouldSearchRootNode should the root node be included in the search
 * @returns { Array } array of all tabbable children
 */
function findFocusable(el, filter, shouldSearchRootNode) {
  const element = el && (0, _.findDOMNode)(el);
  if (!hasQuerySelectorAll(element)) {
    return [];
  }
  let matches = Array.from(element.querySelectorAll(focusableSelector));
  if (shouldSearchRootNode && element.matches(focusableSelector)) {
    matches = [...matches, element];
  }
  return matches.filter(el => {
    if (typeof filter === 'function') {
      return filter(el) && focusable(el);
    } else {
      return focusable(el);
    }
  });
}
function hidden(element) {
  const cs = (0, _.getComputedStyle)(element);
  return cs.display === 'none';
}
function positioned(element) {
  var _style$position, _getComputedStyle$get;
  const POS = ['fixed', 'absolute'];
  if (POS.includes((_style$position = element.style.position) === null || _style$position === void 0 ? void 0 : _style$position.toLowerCase())) {
    return true;
  }
  if (POS.includes((_getComputedStyle$get = (0, _.getComputedStyle)(element).getPropertyValue('position')) === null || _getComputedStyle$get === void 0 ? void 0 : _getComputedStyle$get.toLowerCase())) {
    return true;
  }
  return false;
}
function visible(element) {
  let el = element;
  while (el) {
    if (el === document.body) break;
    if (el instanceof ShadowRoot) break;
    if (hidden(el)) return false;
    if (positioned(el)) break;
    el = el.parentNode;
  }
  return true;
}
function focusable(element) {
  return !element.disabled && visible(element);
}
var _default = exports.default = findFocusable;