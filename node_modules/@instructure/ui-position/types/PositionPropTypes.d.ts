import PropTypes from 'prop-types';
import type { RectType } from '@instructure/ui-dom-utils';
import { UIElement } from '@instructure/shared-types';
declare const placementPropValues: string[];
declare const PositionPropTypes: {
    /**
     * The placement of the content in relation to the trigger
     */
    placement: PropTypes.Requireable<string>;
    /**
     * An element or a function returning an element to use as the mount node
     */
    mountNode: PropTypes.Requireable<NonNullable<NonNullable<Element | PropTypes.ReactElementLike | null | undefined> | ((...args: any[]) => any) | null | undefined>>;
    /**
     * The parent in which to constrain a placement
     */
    constrain: PropTypes.Requireable<NonNullable<string | NonNullable<Element | PropTypes.ReactElementLike | null | undefined> | ((...args: any[]) => any) | null | undefined>>;
};
/**
 * The placement of the content in relation to the trigger
 */
export type PlacementPropValues = 'top' | 'bottom' | 'start' | 'end' | 'top start' | 'top center' | 'top end' | 'top stretch' | 'bottom start' | 'bottom center' | 'bottom end' | 'bottom stretch' | 'start top' | 'start center' | 'start bottom' | 'start stretch' | 'end top' | 'end center' | 'end bottom' | 'end stretch' | 'center start' | 'center end' | 'offscreen';
/**
 * An element or a function returning an element to use as the mount node
 */
export type PositionMountNode = Element | (() => Element | null) | null;
/**
 * The parent in which to constrain a placement
 */
export type PositionConstraint = PositionMountNode | 'window' | 'scroll-parent' | 'parent' | 'none';
export type PlacementValues = 'top' | 'start' | 'end' | 'bottom' | 'center' | 'stretch' | 'offscreen';
declare const mirrorMap: Record<PlacementValues, PlacementValues>;
export type PlacementValueArray = [PlacementValues, PlacementValues];
export type PlacementStringValues = PlacementValues | `${PlacementValues} ${PlacementValues}`;
export type ElementPosition = {
    placement?: PlacementPropValues;
    style: {
        top?: 0;
        left?: '-9999em' | 0;
        overflow?: 'hidden';
        position?: 'absolute';
        display?: 'none' | null;
        minWidth?: number | null;
        minHeight?: number | null;
        transform?: string;
    };
};
export type PositionElement = UIElement;
export type Offset<Type extends number | string | undefined = number> = {
    top: Type;
    left: Type;
};
export type Size = Pick<RectType, 'width' | 'height'>;
export type Overflow = Pick<RectType, 'top' | 'bottom' | 'left' | 'right'>;
export default PositionPropTypes;
export { PositionPropTypes, placementPropValues, mirrorMap };
//# sourceMappingURL=PositionPropTypes.d.ts.map