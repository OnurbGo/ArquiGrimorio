import Color from 'tinycolor2';
import type { ColorInputWithoutInstance } from 'tinycolor2';
/**
 * Converts any valid `TinyColor` colors to hex string
 * @param rgb a color string
 * @returns a hex string like `#FF0000`
 */
declare const colorToHex: (rgb: ColorInputWithoutInstance) => string;
/**
 * Transforms any `TinyColor` to 8 length HEX (alpha included)
 * @param color representation from `TinyColor`
 * @returns An 8 length hex string like `#FF0000FF`
 */
declare const colorToHex8: (color: ColorInputWithoutInstance) => string;
/**
 * Transforms any `TinyColor` to RGBA object ( {r:number, g:number, b:number, a:number} )
 * also exported as `hexToRgb` for backward compatiblity reasons
 * @param color representation from `TinyColor`
 * @returns A `TinyColor` RGBA type
 */
declare const colorToRGB: (color: ColorInputWithoutInstance) => Color.ColorFormats.RGBA;
/**
 * Transforms any `TinyColor` to HSVA object ( {h:number, s:number, v:number, a:number} )
 * @param color representation from `TinyColor`
 * @returns A `TinyColor` HSVA type
 */
declare const colorToHsva: (color: ColorInputWithoutInstance) => Color.ColorFormats.HSVA;
/**
 * Transforms any `TinyColor` to HSLA object ( {h:number, s:number, l:number, a:number} )
 * @param color representation from `TinyColor`
 * @returns  A `TinyColor` HSLA type
 */
declare const colorToHsla: (color: ColorInputWithoutInstance) => Color.ColorFormats.HSLA;
export { colorToHex, colorToHex8, colorToHsva, colorToHsla, colorToRGB, colorToHex as color2hex };
//# sourceMappingURL=conversions.d.ts.map