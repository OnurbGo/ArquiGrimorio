"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSafari = exports.isIE = exports.isFirefox = exports.isEdge = exports.isChromium = exports.isAndroidOrIOS = exports.getBrowser = void 0;
var _uaParserJs = _interopRequireDefault(require("ua-parser-js"));
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * ---
 * category: utilities/utils
 * ---
 * A utility module using the [ua-parser-js](https://www.npmjs.com/package/ua-parser-js) browser
 * detection library.
 *
 * @module getBrowser
 */

const getBrowser = () => {
  const parser = new _uaParserJs.default();
  const _parser$getResult = parser.getResult(),
    browser = _parser$getResult.browser;
  return browser;
};
exports.getBrowser = getBrowser;
const isSafari = () => {
  return getBrowser().name === 'Safari';
};
exports.isSafari = isSafari;
const isEdge = () => {
  return getBrowser().name === 'Edge';
};
exports.isEdge = isEdge;
const isIE = () => {
  return getBrowser().name === 'IE';
};
exports.isIE = isIE;
const isChromium = () => {
  const chromiumBasedBrowsers = ['Chrome', 'Chromium', 'Opera', 'Edge'];
  return chromiumBasedBrowsers.some(browser => {
    var _getBrowser$name;
    return (_getBrowser$name = getBrowser().name) === null || _getBrowser$name === void 0 ? void 0 : _getBrowser$name.includes(browser);
  });
};
exports.isChromium = isChromium;
const isFirefox = () => {
  return getBrowser().name === 'Firefox';
};
exports.isFirefox = isFirefox;
const isAndroidOrIOS = () => {
  const parser = new _uaParserJs.default();
  const result = parser.getResult();
  const device = parser.getDevice();
  return result.os.name === 'Android' || device.model === 'iPhone' || device.model === 'iPad' ? true : false;
};
exports.isAndroidOrIOS = isAndroidOrIOS;