import type { BaseTheme, BaseThemeVariables, DeepPartial } from '@instructure/shared-types';
declare global {
    var __GLOBAL_THEME_REGISTRY__: Registry<RegisteredTheme>;
}
type Registry<T extends RegisteredTheme> = {
    currentThemeKey: string | null;
    themes: Record<string, T>;
    registered: Array<T['key']>;
};
type RegisteredTheme<T extends BaseTheme = BaseTheme> = T & {
    /**
     * @deprecated since version 10
     * @param arg the theme overrides
     */
    use(arg?: {
        overrides: DeepPartial<BaseThemeVariables>;
    }): void;
    /**
     * @deprecated since version 10
     */
    variables: BaseThemeVariables;
};
/**
 * Get the global theme registry.
 * @deprecated since version 10
 * @return The theme registry
 */
declare function getRegistry(): Registry<RegisteredTheme>;
/**
 * Set the global theme registry.
 * @deprecated since version 10
 * @param {Registry} registry - the registry to set/replace the current registry with.
 * @returns {void}
 */
declare function setRegistry(registry: Registry<RegisteredTheme>): void;
/**
 * Clear/reset the global theme registry.
 * @deprecated since version 10
 * @returns {void}
 */
declare function clearRegistry(): void;
/**
 * Get the activated theme object.
 * @deprecated since version 10
 * @return the default theme object
 */
declare function getCurrentTheme(): RegisteredTheme | undefined;
/**
 * Registers the passed theme into the ThemeRegistry.
 * @deprecated since version 10
 * @param {BaseTheme} theme - the theme object to register into the ThemeRegistry
 * @returns {RegisteredTheme} If the given theme is already in the ThemeRegistry then simply return that theme.
 * Otherwise, returns the theme with a wrapper around it, so it can be `.use()`-ed to activate the given theme from the registry.
 * This function also adds a `variables` prop for backwards compatibility (deprecated).
 */
declare function registerTheme<T extends BaseTheme>(theme: T): RegisteredTheme<T>;
/**
 * ---
 * category: utilities/themes
 * ---
 * @module ThemeRegistry
 *
 * DEPRECATED. This will be deleted, please use `InstUISettingsProvider` instead.
 * A global theme registry used for registering theme objects, setting globally available themes
 * and receiving the currently used theme.
 * @deprecated since version 10
 */
declare const ThemeRegistry: {
    getRegistry: typeof getRegistry;
    clearRegistry: typeof clearRegistry;
    setRegistry: typeof setRegistry;
    registerTheme: typeof registerTheme;
    getCurrentTheme: typeof getCurrentTheme;
};
export default ThemeRegistry;
export { ThemeRegistry, getRegistry, clearRegistry, setRegistry, getCurrentTheme, registerTheme };
export type { RegisteredTheme as Theme, Registry };
//# sourceMappingURL=ThemeRegistry.d.ts.map