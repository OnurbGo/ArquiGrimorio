"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThemeRegistry = void 0;
exports.clearRegistry = clearRegistry;
exports.default = void 0;
exports.getCurrentTheme = getCurrentTheme;
exports.getRegistry = getRegistry;
exports.registerTheme = registerTheme;
exports.setRegistry = setRegistry;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _console = require("@instructure/console");
var _mergeDeep = require("@instructure/ui-utils/lib/mergeDeep.js");
var _isBaseTheme = require("@instructure/ui-utils/lib/isBaseTheme.js");
const _excluded = ["key", "description"],
  _excluded2 = ["key", "description", "use"];
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
const DEFAULT_THEME_KEY = '@@themeRegistryDefaultTheme';
const GLOBAL_THEME_REGISTRY = '__GLOBAL_THEME_REGISTRY__';

// initialize the registry:
if (globalThis[GLOBAL_THEME_REGISTRY]) {
  // initialize the registry using whatever has been previously defined:
  setRegistry(validateRegistry(globalThis[GLOBAL_THEME_REGISTRY]));
} else {
  // initialize the registry to the default/empty state:
  clearRegistry();
}

/**
 * Creates and returns a new empty registry.
 * @returns {Registry} the empty registry object
 * @private
 */
function makeRegistry() {
  const registry = {
    currentThemeKey: null,
    themes: {},
    registered: [] // the theme keys in the order they are registered,
  };
  return registry;
}

/**
 * Validates the passed registry, if the passed registry is undefined, then it will create an empty registry.
 * @param registry - the registry to validate
 * @returns {Registry} the registry
 * @private
 */
function validateRegistry(registry) {
  const defaultRegistry = makeRegistry();
  if (typeof registry === 'undefined') {
    return defaultRegistry;
  }
  let valid = true;
  Object.keys(defaultRegistry).forEach(key => {
    if (typeof registry[key] === 'undefined') {
      valid = false;
    }
  });
  (0, _console.error)(valid, '[theme-registry] Invalid global theme registry!');
  return registry;
}

/**
 * Get the global theme registry.
 * @deprecated since version 10
 * @return The theme registry
 */
function getRegistry() {
  return globalThis[GLOBAL_THEME_REGISTRY];
}

/**
 * Set the global theme registry.
 * @deprecated since version 10
 * @param {Registry} registry - the registry to set/replace the current registry with.
 * @returns {void}
 */
function setRegistry(registry) {
  globalThis[GLOBAL_THEME_REGISTRY] = registry;
}

/**
 * Clear/reset the global theme registry.
 * @deprecated since version 10
 * @returns {void}
 */
function clearRegistry() {
  setRegistry(makeRegistry());
}

/**
 * Get the activated theme object.
 * @deprecated since version 10
 * @return the default theme object
 */
function getCurrentTheme() {
  const registry = getRegistry();
  const currentThemeKey = registry.currentThemeKey;
  if (currentThemeKey) {
    return registry.themes[currentThemeKey];
  }
  return void 0;
}

/**
 * Activate a theme by the given themeKey.
 * @param {String} themeKey - the default theme key
 * @param {DeepPartial<BaseThemeVariables>} overrides - the overrides for the theme variables
 * @returns {RegisteredTheme} the registered theme object
 * @private
 */
function activateTheme(themeKey, overrides) {
  const registry = getRegistry();
  const theme = registry.themes[themeKey];
  if (!theme) {
    if (themeKey !== DEFAULT_THEME_KEY) {
      (0, _console.error)(theme, `[theme-registry] Could not find theme: '${themeKey}' in the registry.`);
    }
  }
  registry.currentThemeKey = themeKey;
  const themeWithOverrides = (0, _mergeDeep.mergeDeep)(theme, overrides);
  registry.themes[themeKey] = themeWithOverrides;
  return themeWithOverrides;
}
/**
 * Wraps a theme and provides a method to activate the theme.
 * @returns the wrapped theme object
 * @private
 */
function makeTheme(theme) {
  const key = theme.key,
    description = theme.description,
    rest = (0, _objectWithoutProperties2.default)(theme, _excluded);
  const wrappedTheme = {
    key,
    description,
    ...rest,
    /**
     * Activate a global theme with the given overrides.
     * @deprecated since version 10
     * @param arg
     */
    use(arg) {
      activateTheme(key, (arg === null || arg === void 0 ? void 0 : arg.overrides) || {});
    }
  };
  return new Proxy(wrappedTheme, {
    get(target, property) {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const key = target.key,
        description = target.description,
        use = target.use,
        variables = (0, _objectWithoutProperties2.default)(target, _excluded2);
      // this is needed for backwards compatible reasons,
      // themes used to have a 'variables' property on it that we deleted in v8 but is actually needed for canvas
      if (property === 'variables') {
        return variables;
      }
      return Reflect.get(target, property);
    }
  });
}

/**
 * Registers the passed theme into the ThemeRegistry.
 * @deprecated since version 10
 * @param {BaseTheme} theme - the theme object to register into the ThemeRegistry
 * @returns {RegisteredTheme} If the given theme is already in the ThemeRegistry then simply return that theme.
 * Otherwise, returns the theme with a wrapper around it, so it can be `.use()`-ed to activate the given theme from the registry.
 * This function also adds a `variables` prop for backwards compatibility (deprecated).
 */
function registerTheme(theme) {
  const registry = getRegistry();
  if (theme.key && registry.themes[theme.key]) {
    return registry.themes[theme.key];
  } else {
    if (!(0, _isBaseTheme.isBaseTheme)(theme)) {
      (0, _console.error)(false, "[theme-registry] The theme provided to 'registerTheme' is not a valid theme object!\nFor it to be valid some properties have to be present, check out https://instructure.design/#canvas as a reference.");
      throw new Error();
    }
    const registeredTheme = makeTheme(theme);
    registry.themes[registeredTheme.key] = registeredTheme;
    registry.registered.push(registeredTheme.key);
    return registeredTheme;
  }
}

/**
 * ---
 * category: utilities/themes
 * ---
 * @module ThemeRegistry
 *
 * DEPRECATED. This will be deleted, please use `InstUISettingsProvider` instead.
 * A global theme registry used for registering theme objects, setting globally available themes
 * and receiving the currently used theme.
 * @deprecated since version 10
 */
const ThemeRegistry = exports.ThemeRegistry = {
  getRegistry,
  clearRegistry,
  setRegistry,
  registerTheme,
  getCurrentTheme
};
var _default = exports.default = ThemeRegistry;