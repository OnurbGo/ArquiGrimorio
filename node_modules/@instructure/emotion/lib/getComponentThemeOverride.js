"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getComponentThemeOverride = exports.default = void 0;
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * ---
 * private: true
 * ---
 * This is a utility function which calculates the correct component theme
 * based on every possible override there is.

 * @param theme - Theme object
 * @param displayName - Name of the component
 * @param componentId - componentId of the component
 * @param props - The component's props object
 * @param componentTheme - The component's default theme
 * @returns The calculated theme override object
 */
const getComponentThemeOverride = (theme, displayName, componentId, props, componentTheme) => {
  const name = displayName;
  const id = componentId;
  const themeOverride = props ? props.themeOverride : void 0;
  const _ref = theme,
    componentOverrides = _ref.componentOverrides;
  let overridesFromTheme = {};
  let overrideFromComponent = {};
  if (componentOverrides) {
    overridesFromTheme = name && componentOverrides[name] || id && componentOverrides[id] || {};
  }
  if (themeOverride) {
    if (typeof themeOverride === 'function') {
      overrideFromComponent = themeOverride(componentTheme || {},
      // the `theme` technically could be a partial theme / override object too,
      // but we want to display all possible options
      theme);
    } else {
      overrideFromComponent = themeOverride;
    }
  }
  return {
    ...overridesFromTheme,
    ...overrideFromComponent
  };
};
exports.getComponentThemeOverride = getComponentThemeOverride;
var _default = exports.default = getComponentThemeOverride;