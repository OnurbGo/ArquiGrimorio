"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useStyle = exports.default = void 0;
var _useTheme = require("./useTheme");
var _getComponentThemeOverride = require("./getComponentThemeOverride");
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// returns the second parameter of a function

const useStyle = useStyleParams => {
  const generateStyle = useStyleParams.generateStyle,
    generateComponentTheme = useStyleParams.generateComponentTheme,
    params = useStyleParams.params,
    componentId = useStyleParams.componentId,
    displayName = useStyleParams.displayName;
  const theme = (0, _useTheme.useTheme)();
  const baseComponentTheme = generateComponentTheme ? generateComponentTheme(theme) : {};
  const themeOverride = (0, _getComponentThemeOverride.getComponentThemeOverride)(theme, displayName ? displayName : componentId || '', componentId, params, baseComponentTheme);
  const componentTheme = {
    ...baseComponentTheme,
    ...themeOverride
  };
  return generateStyle(componentTheme, params ? params : {});
};
exports.useStyle = useStyle;
var _default = exports.default = useStyle;