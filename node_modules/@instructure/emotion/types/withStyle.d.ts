import type { BaseTheme, ComponentTheme } from '@instructure/shared-types';
import type { ComponentStyle } from './EmotionTypes';
type WithStylePrivateProps<Style extends ComponentStyle | null = ComponentStyle> = Style extends null ? object : {
    styles?: Style;
    makeStyles?: (extraArgs?: Record<string, unknown>) => void;
};
type ThemeOverrideProp<Theme extends ComponentTheme | null = ComponentTheme> = {
    themeOverride?: Partial<Theme> | ((componentTheme: Theme, currentTheme: BaseTheme) => Partial<Theme>);
};
type WithStyleProps<Theme extends ComponentTheme | null = ComponentTheme, Style extends ComponentStyle | null = ComponentStyle> = Theme extends null ? WithStylePrivateProps<Style> : WithStylePrivateProps<Style> & ThemeOverrideProp<Theme>;
/**
 * ---
 * category: utilities/themes
 * ---
 *
 * A decorator or higher order component that makes a component themeable.
 *
 * It adds a `makeStyles` function and the generated `styles` object to the decorated Component's props. If it has an own theme, it also adds the `themeOverride` prop to the component.
 *
 * As a HOC:
 *
 * ```js-code
 * import { withStyle } from '@instructure/emotion'
 * import generateStyle from './styles'
 * import generateComponentTheme from './theme'
 *
 * export default withStyle(generateStyle, generateComponentTheme)(ExampleComponent)
 * ```
 *
 * Themeable components inject their themed styles into the document
 * when they are mounted.
 *
 * ### Applying themes
 *
 * A themeable componentâ€™s theme can be configured via wrapping it in an
 * [InstUISettingsProvider](#InstUISettingsProvider) component, and/or set
 * explicitly via its `themeOverride` prop.
 *
 * InstUISettingsProvider provides a theme object with global theme variables (e.g. the [canvas theme](/#canvas)).
 * These variables are mapped to the component's own variables in `theme.js` (see [theming](#theming-basics) for more info).
 *
 * With the `themeOverride` prop you can directly set/override the component theme variables declared in theme.js. It accepts an object or a function. The function has the component's theme and the currently active main theme as its parameter.
 *
 * See more about the overrides on the [Using theme overrides](/#using-theme-overrides) docs page.
 *
 * ```js-code
 * // ExampleComponent/theme.js
 * const generateComponentTheme = (theme) => {
 *   const { colors } = theme
 *
 *   const componentVariables = {
 *     background: colors?.backgroundMedium,
 *     color: colors?.textDarkest,
 *
 *     hoverColor: colors?.textLightest,
 *     hoverBackground: colors?.backgroundDarkest
 *   }
 *
 *   return componentVariables
 * }
 * export default generateComponentTheme
 * ```
 *
 * ```jsx-code
 * {// global theme override}
 * <InstUISettingsProvider theme={{
 *   colors: { backgroundMedium: '#888' }
 * }}>
 *  {// component theme override}
 *   <ExampleComponent themeOverride={{ hoverColor: '#eee' }} />
 *
 *  {// component theme override with function}
 *   <ExampleComponent themeOverride={(componentTheme, currentTheme) => ({
 *     hoverBackground: componentTheme.background,
 *     activeBackground: currentTheme.colors.backgroundBrand
 *   })} />
 * </InstUISettingsProvider>
 * ```
 *
 * @module withStyle
 *
 * @param {function} generateStyle - The function that returns the component's style object
 * @param {function} generateComponentTheme - The function that returns the component's theme variables object
 * @returns {ReactElement} The decorated WithStyle Component
 */
declare const withStyle: (...args: unknown[]) => (ComposedComponent: import("react").ComponentClass<any>) => any;
export default withStyle;
export { withStyle };
export type { WithStyleProps };
//# sourceMappingURL=withStyle.d.ts.map