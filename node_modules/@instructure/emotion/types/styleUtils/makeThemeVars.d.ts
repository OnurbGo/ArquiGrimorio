import type { BaseTheme, BaseThemeVariables } from '@instructure/shared-types';
type ThemeVarGroup = BaseThemeVariables[keyof BaseThemeVariables];
type PrefixedThemeVars<P extends string, Variables extends Partial<ThemeVarGroup>> = Variables extends Record<infer R, any> ? Record<`${P}${R extends string ? Capitalize<R> : string}`, Variables extends BaseTheme['stacking'] ? number : string> : Variables;
/**
 * ---
 * category: utilities/themes
 * ---
 * Given a prefix and a theme object, prepends the object keys with
 * the designated prefix and camel cases the concatenation.
 * @module makeThemeVars
 * @param {String} prefix - a string to prepend to object keys
 * @param {Object} vars - an object
 * @returns {Object} a modified object with prefixed keys
 */
declare function makeThemeVars<P extends string, V extends Partial<ThemeVarGroup>>(prefix: P, vars: V): PrefixedThemeVars<P, V>;
export default makeThemeVars;
export { makeThemeVars };
//# sourceMappingURL=makeThemeVars.d.ts.map