import type { CSSShorthandValue } from '@instructure/shared-types';
declare const ThemeablePropValues: {
    readonly SHADOW_TYPES: {
        readonly resting: "resting";
        readonly above: "above";
        readonly topmost: "topmost";
        readonly none: "none";
    };
    readonly STACKING_TYPES: {
        readonly deepest: "deepest";
        readonly below: "below";
        readonly resting: "resting";
        readonly above: "above";
        readonly topmost: "topmost";
    };
    readonly BORDER_WIDTHS: {
        readonly 0: "0";
        readonly none: "none";
        readonly small: "small";
        readonly medium: "medium";
        readonly large: "large";
    };
    readonly BORDER_RADII: {
        readonly 0: "0";
        readonly none: "none";
        readonly small: "small";
        readonly medium: "medium";
        readonly large: "large";
        readonly circle: "circle";
        readonly pill: "pill";
    };
    readonly BACKGROUNDS: {
        readonly default: "default";
        readonly inverse: "inverse";
        readonly transparent: "transparent";
    };
    readonly SIZES: {
        readonly xSmall: "x-small";
        readonly small: "small";
        readonly medium: "medium";
        readonly large: "large";
        readonly xLarge: "x-large";
    };
    readonly SPACING: {
        readonly 0: "0";
        readonly none: "none";
        readonly auto: "auto";
        readonly xxxSmall: "xxx-small";
        readonly xxSmall: "xx-small";
        readonly xSmall: "x-small";
        readonly small: "small";
        readonly mediumSmall: "mediumSmall";
        readonly medium: "medium";
        readonly large: "large";
        readonly xLarge: "x-large";
        readonly xxLarge: "xx-large";
    };
};
type OldSpacingKeys = keyof typeof ThemeablePropValues.SPACING;
type OldSpacingValues = (typeof ThemeablePropValues.SPACING)[OldSpacingKeys];
type NewSpacingValues = 'space0' | 'space2' | 'space4' | 'space8' | 'space12' | 'space16' | 'space24' | 'space36' | 'space48' | 'space60' | 'sections' | 'sectionElements' | 'trayElements' | 'modalElements' | 'moduleElements' | 'paddingCardLarge' | 'paddingCardMedium' | 'paddingCardSmall' | 'selects' | 'textareas' | 'inputFields' | 'checkboxes' | 'radios' | 'toggles' | 'buttons' | 'tags' | 'statusIndicators' | 'dataPoints';
type SpacingValues = OldSpacingValues | NewSpacingValues;
type Spacing = SpacingValues | (string & {});
type ShadowKeys = keyof typeof ThemeablePropValues.SHADOW_TYPES;
type Shadow = (typeof ThemeablePropValues.SHADOW_TYPES)[ShadowKeys];
type StackingKeys = keyof typeof ThemeablePropValues.STACKING_TYPES;
type Stacking = (typeof ThemeablePropValues.STACKING_TYPES)[StackingKeys];
type BackgroundKeys = keyof typeof ThemeablePropValues.BACKGROUNDS;
type Background = (typeof ThemeablePropValues.BACKGROUNDS)[BackgroundKeys];
type BorderRadiiKeys = keyof typeof ThemeablePropValues.BORDER_RADII;
type BorderRadiiValues = (typeof ThemeablePropValues.BORDER_RADII)[BorderRadiiKeys];
type BorderRadii = CSSShorthandValue<BorderRadiiValues | string>;
type BorderWidthKeys = keyof typeof ThemeablePropValues.BORDER_WIDTHS;
type BorderWidthValues = (typeof ThemeablePropValues.BORDER_WIDTHS)[BorderWidthKeys];
type BorderWidth = CSSShorthandValue<BorderWidthValues>;
export default ThemeablePropValues;
export { ThemeablePropValues };
export type { SpacingValues, Spacing, Shadow, Stacking, Background, BorderRadiiValues, BorderRadii, BorderWidthValues, BorderWidth };
//# sourceMappingURL=ThemeablePropValues.d.ts.map