import type { BaseTheme, ComponentTheme } from '@instructure/shared-types';
type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1] extends undefined ? never : Parameters<T>[1];
type UseStyleParamsWithTheme<P extends (theme: any, params: any) => any> = {
    generateStyle: P;
    params?: SecondParameter<P>;
    generateComponentTheme: (theme: BaseTheme) => ComponentTheme;
    componentId: string;
    displayName?: string;
};
type UseStyleParamsWithoutTheme<P extends (theme: any, params: any) => any> = {
    generateStyle: P;
    params?: SecondParameter<P>;
    generateComponentTheme?: undefined;
    componentId?: undefined;
    displayName?: undefined;
};
declare const useStyle: <P extends (theme: any, params: any) => any>(useStyleParams: UseStyleParamsWithTheme<P> | UseStyleParamsWithoutTheme<P>) => ReturnType<P>;
export default useStyle;
export { useStyle };
//# sourceMappingURL=useStyle.d.ts.map