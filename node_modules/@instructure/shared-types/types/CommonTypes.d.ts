import type { ClassicComponent, ClassicComponentClass, ClassType, Component, ComponentClass, ComponentElement, ComponentState, ReactHTML, ReactNode, ReactElement, ReactSVG } from 'react';
/** Element func parameter, mainly for the `findDOMNode` util */
export type UIElement = Node | Window | ReactElement | Component | (() => Node | Window | null | undefined) | null;
/** Type that is renderable by `callRenderProp` */
export type Renderable<P = never> = keyof ReactHTML | keyof ReactSVG | ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>> | ComponentClass | ReactNode | ((data: P) => ReactNode | Element) | (() => ReactNode | Element) | Element;
/**
 * Union type helper for the "children" prop.
 * The argument has to be type of, or union of type of
 * React.ComponentElement<any, any> */
export type ChildrenOfType<T extends ComponentElement<any, any>> = T | undefined | null | ChildrenOfType<T>[];
/**
 * A DOM element or an array of DOM elements or a method that returns a DOM
 * element, that represents the part of the DOM that is not hidden from the
 * screen reader
 */
export type LiveRegion = (() => (Element | null)[]) | (() => Element | null) | (Element | null)[] | Element | null;
interface InstUIBaseComponent {
    componentId?: string;
    allowedProps?: string[];
}
export interface InstUIComponent extends ComponentClass<any, any>, InstUIBaseComponent {
    originalType?: any;
}
export type Themes = 'contrast45' | 'contrast70';
export {};
//# sourceMappingURL=CommonTypes.d.ts.map