import PropTypes from 'prop-types';
type DeepPartial<T> = {
    [P in keyof T]?: DeepPartial<T[P]>;
};
/** Uses a union as optional keys for a Record */
type PartialRecord<K extends keyof any, T> = {
    [P in K]?: T;
};
/**
 * Make all properties in T nullable
 */
type Nullable<T> = {
    [P in keyof T]: T[P] | null;
};
/** Makes all possible combination for a CSS prop to accept 1 to 4 values */
type CSSShorthandValue<Value extends string> = `${Value}` | `${Value} ${Value}` | `${Value} ${Value} ${Value}` | `${Value} ${Value} ${Value} ${Value}`;
/**
 * Generates a type which contains HTML attributes for the given element
 * excluding attributes which are defined in Props.
 * The "dir" prop is forced to the given value because InstUI accepts only
 * these.
 *
 * @example
 * class Button extends React.Component<ButtonProps & OtherHTMLAttributes<ButtonProps, React.ButtonHTMLAttributes<ButtonProps>>> {}
 */
type OtherHTMLAttributes<Props, Attributes extends React.HTMLAttributes<Props & Element> = React.AllHTMLAttributes<Props & Element>> = Omit<Attributes, keyof Props | 'dir'> & {
    dir?: 'ltr' | 'rtl';
};
/**
 * Helper type for the propTypes object.
 * It ensures that the passed prop type keys match with the propType version.
 */
type PropValidators<PropKeys extends string> = Record<PropKeys, PropTypes.Validator<unknown>>;
/**
 * These props are not the components own prop, but we have to allow them,
 * since these are passed to another component.
 */
type PickPropsWithExceptions<TargetProps extends Record<string, any>, ExcludedProps extends keyof TargetProps> = Omit<TargetProps, ExcludedProps>;
export type { DeepPartial, PartialRecord, Nullable, CSSShorthandValue, OtherHTMLAttributes, PropValidators, PickPropsWithExceptions };
//# sourceMappingURL=UtilityTypes.d.ts.map