import type { AsElementType, BadgeTheme, PropValidators } from '@instructure/shared-types';
import type { Spacing, WithStyleProps, ComponentStyle } from '@instructure/emotion';
import type { PlacementPropValues } from '@instructure/ui-position';
import type { WithDeterministicIdProps } from '@instructure/ui-react-utils';
import type { PropsWithChildren } from 'react';
type BadgeOwnProps = {
    count?: number;
    /**
     * The number at which the count gets truncated by
     * formatOverflowText. For example, a countUntil of 100
     * would stop the count at 99.
     */
    countUntil?: number;
    /**
     * Render Badge as a counter (`count`) or as a smaller dot (`notification`) with
     * no count number displayed.
     */
    type?: 'count' | 'notification';
    /**
     * Render Badge as an inline html element that is not positioned relative
     * to a child.
     */
    standalone?: boolean;
    /**
     * Make the Badge slowly pulse twice to get the user's attention.
     */
    pulse?: boolean;
    variant?: 'primary' | 'success' | 'danger' | 'inverse';
    /**
     * provides a reference to the underlying html root element
     */
    elementRef?: (element: Element | null) => void;
    formatOverflowText?: (count: number, countUntil: number) => string;
    formatOutput?: (formattedCount: string) => JSX.Element | string | number;
    as?: AsElementType;
    /**
     * Specifies the display property of the container.
     *
     * __Use "block" only when the content inside the Badge also has "block" display.__
     */
    display?: 'inline-block' | 'block';
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: Spacing;
    /**
     * Supported values are `top start`, `top end`, `end center`, `bottom end`,
     * `bottom start`, and `start center`
     */
    placement?: PlacementPropValues;
} & PropsWithChildren<unknown>;
type PropKeys = keyof BadgeOwnProps;
type AllowedPropKeys = Readonly<Array<PropKeys>>;
type BadgeProps = BadgeOwnProps & WithStyleProps<BadgeTheme, BadgeStyle> & WithDeterministicIdProps;
type BadgeStyle = ComponentStyle<'badge' | 'wrapper'>;
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
export type { BadgeProps, BadgeStyle };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map