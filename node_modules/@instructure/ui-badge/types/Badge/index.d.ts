import { Component, ReactElement } from 'react';
import type { BadgeProps } from './props';
/**
---
category: components
---
**/
declare class Badge extends Component<BadgeProps> {
    static readonly componentId = "Badge";
    static propTypes: import("@instructure/shared-types").PropValidators<"count" | "countUntil" | "type" | "standalone" | "pulse" | "variant" | "elementRef" | "formatOverflowText" | "formatOutput" | "as" | "display" | "margin" | "placement" | "children">;
    static allowedProps: readonly ("count" | "countUntil" | "type" | "standalone" | "pulse" | "variant" | "elementRef" | "formatOverflowText" | "formatOutput" | "as" | "display" | "margin" | "placement" | "children")[];
    static defaultProps: {
        standalone: boolean;
        type: string;
        variant: string;
        display: string;
        pulse: boolean;
        placement: string;
        elementRef: () => void;
        formatOverflowText: (_count: number, countUntil: number) => string;
    };
    constructor(props: BadgeProps);
    _defaultId: string;
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    componentDidMount(): void;
    componentDidUpdate(): void;
    countOverflow(): boolean | 0 | undefined;
    renderOutput(): string | number | JSX.Element | null;
    renderBadge(): import("@emotion/react/jsx-runtime").JSX.Element;
    renderChildren(): ReactElement<any, string | import("react").JSXElementConstructor<any>>[] | null | undefined;
    render(): import("@emotion/react/jsx-runtime").JSX.Element;
}
export default Badge;
export { Badge };
//# sourceMappingURL=index.d.ts.map