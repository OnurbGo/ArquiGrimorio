"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Badge = void 0;
var _react = require("react");
var _View = require("@instructure/ui-view/lib/View");
var _safeCloneElement = require("@instructure/ui-react-utils/lib/safeCloneElement.js");
var _withDeterministicId = require("@instructure/ui-react-utils/lib/DeterministicIdContext/withDeterministicId.js");
var _testable = require("@instructure/ui-testable/lib/testable.js");
var _emotion = require("@instructure/emotion");
var _styles = _interopRequireDefault(require("./styles"));
var _theme = _interopRequireDefault(require("./theme"));
var _props = require("./props");
var _jsxRuntime = require("@emotion/react/jsx-runtime");
var _dec, _dec2, _dec3, _class, _Badge;
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/**
---
category: components
---
**/
let Badge = exports.Badge = (_dec = (0, _withDeterministicId.withDeterministicId)(), _dec2 = (0, _emotion.withStyle)(_styles.default, _theme.default), _dec3 = (0, _testable.testable)(), _dec(_class = _dec2(_class = _dec3(_class = (_Badge = class Badge extends _react.Component {
  constructor(props) {
    super(props);
    this._defaultId = void 0;
    this.ref = null;
    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;
      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
    this._defaultId = this.props.deterministicId();
  }
  componentDidMount() {
    var _this$props$makeStyle, _this$props;
    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }
  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;
    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }
  countOverflow() {
    const _this$props3 = this.props,
      count = _this$props3.count,
      countUntil = _this$props3.countUntil;
    return countUntil && count && countUntil > 1 && count >= countUntil;
  }
  renderOutput() {
    const _this$props4 = this.props,
      count = _this$props4.count,
      countUntil = _this$props4.countUntil,
      formatOverflowText = _this$props4.formatOverflowText,
      formatOutput = _this$props4.formatOutput,
      type = _this$props4.type;

    // If the badge count is >= than the countUntil limit, format the badge text
    // via the formatOverflowText function prop
    let formattedCount = (count || '').toString();
    if (count && countUntil && formatOverflowText && type === 'count' && this.countOverflow()) {
      formattedCount = formatOverflowText(count, countUntil);
    }
    if (typeof formatOutput === 'function') {
      return formatOutput(formattedCount);
    } else {
      return type === 'count' ? formattedCount : null;
    }
  }
  renderBadge() {
    const _this$props5 = this.props,
      count = _this$props5.count,
      margin = _this$props5.margin,
      standalone = _this$props5.standalone,
      type = _this$props5.type,
      styles = _this$props5.styles;
    return (0, _jsxRuntime.jsx)(_View.View, {
      margin: standalone ? margin : 'none',
      css: styles === null || styles === void 0 ? void 0 : styles.badge,
      title: type === 'count' && this.countOverflow() ? count === null || count === void 0 ? void 0 : count.toString() : '',
      id: !standalone ? this._defaultId : void 0,
      display: standalone ? 'inline-block' : 'block',
      ...(standalone && {
        elementRef: this.handleRef
      }),
      children: this.renderOutput()
    });
  }
  renderChildren() {
    return _react.Children.map(this.props.children, child => {
      return (0, _safeCloneElement.safeCloneElement)(child, {
        'aria-describedby': this._defaultId
      });
    });
  }
  render() {
    const _this$props6 = this.props,
      margin = _this$props6.margin,
      standalone = _this$props6.standalone,
      display = _this$props6.display,
      as = _this$props6.as,
      styles = _this$props6.styles;
    if (standalone) {
      return this.renderBadge();
    } else {
      return (0, _jsxRuntime.jsxs)(_View.View, {
        as: as,
        margin: margin,
        elementRef: this.handleRef,
        css: styles === null || styles === void 0 ? void 0 : styles.wrapper,
        display: display,
        children: [this.renderChildren(), this.renderBadge()]
      });
    }
  }
}, _Badge.displayName = "Badge", _Badge.componentId = 'Badge', _Badge.propTypes = _props.propTypes, _Badge.allowedProps = _props.allowedProps, _Badge.defaultProps = {
  standalone: false,
  type: 'count',
  variant: 'primary',
  display: 'inline-block',
  pulse: false,
  placement: 'top end',
  elementRef: () => {},
  formatOverflowText: (_count, countUntil) => `${countUntil - 1} +`
}, _Badge)) || _class) || _class) || _class);
var _default = exports.default = Badge;