interface DebounceOptions {
    /**
     * Specify invoking on the leading edge of the timeout
     */
    leading?: boolean;
    /**
     * The maximum time `func` is allowed to be delayed before it's invoked
     */
    maxWait?: number;
    /**
     * Specify invoking on the trailing edge of the timeout
     */
    trailing?: boolean;
}
export type Debounced<F extends (...args: any) => any> = F & {
    cancel: () => void;
    flush: () => ReturnType<F>;
};
/**
 * ---
 * category: utilities/utils
 * ---
 * Creates a debounced function that delays invoking func until after wait milliseconds have elapsed
 * since the last time the debounced function was invoked. The debounced function comes with a cancel
 * method to cancel delayed func invocations and a flush method to immediately invoke them. Provide options
 * to indicate whether func should be invoked on the leading and/or trailing edge of the wait timeout.
 * The func is invoked with the last arguments provided to the debounced function. Subsequent calls to the
 * debounced function return the result of the last func invocation.
 *
 * [lodash.debounce](https://github.com/lodash/lodash/blob/master/debounce.js)
 * doesn't work well with [sinon fakeTimers](http://sinonjs.org/releases/v1.17.7/fake-timers/)
 * so this is forked from the lodash source.
 *
 * Note: Modified from the original to check for cancelled boolean before invoking func to prevent React setState
 * on unmounted components.
 * For a cool explanation see https://css-tricks.com/debouncing-throttling-explained-examples/
 *
 * @module debounce
 *
 * @param func The function to debounce.
 * @param wait The number of milliseconds to delay.
 * @param options options object.
 * @returns Returns the new debounced function.
 */
declare function debounce<F extends (...args: any) => any>(func: F, wait?: number, options?: DebounceOptions): Debounced<F>;
export default debounce;
export { debounce };
//# sourceMappingURL=debounce.d.ts.map